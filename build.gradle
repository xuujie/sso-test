/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */
import javax.security.auth.login.Configuration

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */
buildscript {
    ext {
        springBootVersion = "2.0.6.RELEASE"
        springVersion = "5.1.2.RELEASE"
        springDataVersion = "2.1.0.RELEASE"
        springSecurityVersion = "5.1.1.RELEASE"
        springSecurityJwtVersion = "1.0.9.RELEASE"
        springSecurityOauth2Version = "2.3.3.RELEASE"
        slf4jVersion = "1.7.25"
        junitVersion = "4.12"
        googleApiVersion = "1.23.0"
        ultraqThymeleafLayoutVersion = "2.3.0"
        embadedMongoVersion = "2.1.1"
        commonsLangVersion = "3.8"
        commonsCollectionsVersion = "4.1"
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.6.RELEASE"
    }
}

task dependenciesGraphDot {

    mustRunAfter "clean"

    def graphBuildDir = "build/dependenciesGraph"
    def dotFile = file "$graphBuildDir/graph.dot"

    doLast {
        delete graphBuildDir
        mkdir graphBuildDir

        dotFile << "digraph dependencies {\n"

        project.subprojects.forEach { Project subProject ->
            try {

                Configuration compileConfig = subProject.configurations["compile"]

                compileConfig
                        .dependencies
                        .grep { it.respondsTo("getDependencyProject") }
                        .forEach { dotFile << """  "$subProject.name" -> "$it.dependencyProject.name"\n""" }
            } catch (UnknownConfigurationException ignored) {
            }
        }
        dotFile << "}\n"
    }
}

task dependenciesGraph(dependsOn: "dependenciesGraphDot", type: Exec) {
    workingDir "$project.buildDir/dependenciesGraph"
    commandLine "dot", "-O", "-Tpng", "graph.dot"
}

task clean(type: Delete) {
    delete "build"
}

